{"version":3,"sources":["Table.jsx","List.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Table","props","state","value","search","updateSearch","bind","data","tableName","row","event","this","setState","target","toLowerCase","name","rows","map","index","className","key","type","placeholder","getValue","onChange","addFunction","onClick","removeStudent","filteredList","tableNames","filter","listItem","indexOf","console","log","removeAssignment","createRows","React","Component","List","handleChange","handleSubmit","preventDefault","currList","title","onSubmit","item","removeFunction","App","buttonClicked","assignments","students","grades","handleButtonClicked","addAssignment","addStudent","addGrade","buttonName","assignmentName","findIndex","assignment","concat","studentName","student","score","newList","_","listIndex","newList1","tabChoice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dec1b03c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Table extends React.Component {\r\n  getValue(data, tableName, row) {\r\n    if (tableName in data && row in data[tableName]) {\r\n      return data[tableName][row];\r\n    } else {\r\n      return \"Add Score\";\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      //search\r\n      search: \"\",\r\n    };\r\n\r\n    this.updateSearch = this.updateSearch.bind(this);\r\n  }\r\n\r\n  // update search\r\n  updateSearch(event) {\r\n    this.setState({ search: event.target.value.toLowerCase() });\r\n  }\r\n\r\n  createRows(name) {\r\n    return (\r\n      <div>\r\n        {this.props.rows.map((row, index) => (\r\n          <div className=\"Box-row d-flex flex-justify-between\" key={index}>\r\n            {row}\r\n            <input\r\n              className=\"form-control input-sm\"\r\n              type=\"text\"\r\n              placeholder={this.getValue(this.props.data, name, row)}\r\n              onChange={(event) =>\r\n                this.props.addFunction(name, row, event.target.value)\r\n              }\r\n            />\r\n\r\n            {/* remove students from grades */}\r\n            <input\r\n              className=\"btn btn-sm \"\r\n              type=\"button\"\r\n              value=\"remove\"\r\n              onClick={() => this.props.removeStudent(index)}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  // eslint-disable-next-line no-dupe-class-members\r\n  render() {\r\n    // search\r\n    const filteredList =\r\n      this.state.search !== \"\"\r\n        ? this.props.tableNames.filter(\r\n            (listItem) =>\r\n              listItem.toLowerCase().indexOf(this.state.search) !== -1\r\n          )\r\n        : this.props.tableNames;\r\n    console.log(filteredList);\r\n\r\n    return (\r\n      <div>\r\n        {/* search */}\r\n        <label>\r\n          <input\r\n            placeholder=\"Search\"\r\n            className=\"form-control input-sm mx-auto d-block mt-6\"\r\n            type=\"text\"\r\n            value={this.state.search}\r\n            onChange={this.updateSearch}\r\n          />\r\n        </label>\r\n\r\n        {this.props.tableNames.map((name, index) => (\r\n          <div className=\"pt-6\" key={index}>\r\n            <div className=\"Box col-6 mx-auto\">\r\n              <div className=\"Box-header Box-title\">\r\n                {name}\r\n\r\n                {/* remove assignments from grades */}\r\n                <input\r\n                  className=\"btn btn-sm float-right\"\r\n                  type=\"button\"\r\n                  value=\"remove\"\r\n                  onClick={() => this.props.removeAssignment(index)}\r\n                />\r\n              </div>\r\n\r\n              <div>{this.createRows(name)}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\n\r\nclass List extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      //search\r\n      search: \"\",\r\n    };\r\n\r\n    this.updateSearch = this.updateSearch.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    this.setState({\r\n      value: \"\",\r\n    });\r\n\r\n    this.props.addFunction(this.state.value);\r\n    event.preventDefault();\r\n  }\r\n\r\n  // update search\r\n  updateSearch(event) {\r\n    this.setState({ search: event.target.value.toLowerCase() });\r\n  }\r\n\r\n  render() {\r\n    // search\r\n    const filteredList =\r\n      this.state.search !== \"\"\r\n        ? this.props.currList.filter(\r\n            (listItem) =>\r\n              listItem.toLowerCase().indexOf(this.state.search) !== -1\r\n          )\r\n        : this.props.currList;\r\n\r\n    return (\r\n      <div className=\"col-6 mx-auto\">\r\n        <p className=\"h2\">{this.props.title}</p>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            <input\r\n              className=\"form-control input-sm\"\r\n              type=\"text\"\r\n              placeholder={this.props.placeholder}\r\n              value={this.state.value}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n\r\n          <input className=\"btn btn-sm\" type=\"submit\" value=\"Submit\" />\r\n\r\n          {/* search */}\r\n          <label>\r\n            <input\r\n              placeholder=\"Search\"\r\n              className=\"form-control input-sm\"\r\n              type=\"text\"\r\n              value={this.state.search}\r\n              onChange={this.updateSearch}\r\n            />\r\n          </label>\r\n        </form>\r\n\r\n        <ul className=\"Box\">\r\n          <div className=\"Box-header\">{this.props.title}</div>\r\n          {filteredList.map((item, index) => (\r\n            <li className=\"Box-row\" key={index}>\r\n              {\" \"}\r\n              {item}\r\n              {/* remove button */}\r\n              <input\r\n                className=\"btn btn-sm float-right\"\r\n                type=\"button\"\r\n                value=\"remove\"\r\n                onClick={() => this.props.removeFunction(index)}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport Table from \"./Table\";\r\nimport List from \"./List\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      buttonClicked: \"\",\r\n      assignments: [],\r\n      students: [],\r\n      grades: {},\r\n    };\r\n\r\n    this.handleButtonClicked = this.handleButtonClicked.bind(this);\r\n    this.addAssignment = this.addAssignment.bind(this);\r\n    this.addStudent = this.addStudent.bind(this);\r\n    this.addGrade = this.addGrade.bind(this);\r\n\r\n    // added remove\r\n    this.removeAssignment = this.removeAssignment.bind(this);\r\n    this.removeStudent = this.removeStudent.bind(this);\r\n  }\r\n\r\n  handleButtonClicked(buttonName) {\r\n    this.setState({\r\n      buttonClicked: buttonName,\r\n    });\r\n  }\r\n\r\n  addAssignment(assignmentName) {\r\n    // added check for existing assignment or empty input\r\n    if (\r\n      !assignmentName ||\r\n      this.state.assignments.findIndex(\r\n        (assignment) => assignment === assignmentName\r\n      ) !== -1\r\n    ) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      assignments: this.state.assignments.concat(assignmentName),\r\n    });\r\n  }\r\n\r\n  addStudent(studentName) {\r\n    // added check for existing student or empty input\r\n    if (\r\n      !studentName ||\r\n      this.state.students.findIndex((student) => student === studentName) !== -1\r\n    ) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      students: this.state.students.concat(studentName),\r\n    });\r\n  }\r\n\r\n  addGrade(assignment, student, score) {\r\n    let grades = this.state.grades;\r\n    let assignmentName = assignment;\r\n    let studentName = student;\r\n    if (!(assignment in grades)) {\r\n      grades[assignmentName] = {};\r\n    }\r\n    grades[assignmentName][studentName] = score;\r\n    this.setState({ grades: grades });\r\n  }\r\n\r\n  removeAssignment(index) {\r\n    const newList = this.state.assignments.filter(\r\n      (_, listIndex) => index !== listIndex\r\n    );\r\n    this.setState({ assignments: newList });\r\n  }\r\n\r\n  removeStudent(index) {\r\n    const newList1 = this.state.students.filter(\r\n      (_, listIndex) => index !== listIndex\r\n    );\r\n    this.setState({ students: newList1 });\r\n  }\r\n\r\n  render() {\r\n    let tabChoice = <div />;\r\n\r\n    if (this.state.buttonClicked === \"assignments\") {\r\n      tabChoice = (\r\n        <List\r\n          placeholder=\"Add Assignment...\"\r\n          currList={this.state.assignments}\r\n          addFunction={this.addAssignment}\r\n          removeFunction={this.removeAssignment}\r\n          title=\"Assignments\"\r\n        />\r\n      );\r\n    }\r\n\r\n    if (this.state.buttonClicked === \"students\") {\r\n      tabChoice = (\r\n        <List\r\n          placeholder=\"Add Student...\"\r\n          currList={this.state.students}\r\n          addFunction={this.addStudent}\r\n          removeFunction={this.removeStudent}\r\n          title=\"Student Roster\"\r\n        />\r\n      );\r\n    }\r\n\r\n    if (this.state.buttonClicked === \"grades\") {\r\n      tabChoice = (\r\n        <Table\r\n          tableNames={this.state.assignments}\r\n          rows={this.state.students}\r\n          addFunction={this.addGrade}\r\n          removeAssignment={this.removeAssignment}\r\n          removeStudent={this.removeStudent}\r\n          data={this.state.grades}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"Box Box--spacious f4\">\r\n          <div className=\"Box-header\">\r\n            <h3 className=\"Box-title d-flex flex-justify-center\">GradeBook</h3>\r\n          </div>\r\n        </div>\r\n        <nav className=\"UnderlineNav d-flex flex-justify-center\">\r\n          <div className=\"UnderlineNav-body pt-6\">\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.handleButtonClicked(\"assignments\")}\r\n            >\r\n              Assignments\r\n            </button>\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.handleButtonClicked(\"students\")}\r\n            >\r\n              Students\r\n            </button>\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.handleButtonClicked(\"grades\")}\r\n            >\r\n              Grades\r\n            </button>\r\n          </div>\r\n        </nav>\r\n        {tabChoice}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}