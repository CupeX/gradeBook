{"version":3,"sources":["Table.jsx","List.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Table","props","_this","Object","classCallCheck","this","_super","call","state","value","search","updateSearch","bind","assertThisInitialized","data","tableName","row","event","setState","target","_this2","rows","filter","listItem","toLowerCase","indexOf","name","_this3","react_default","a","createElement","map","index","className","key","type","placeholder","getValue","onChange","addFunction","onClick","removeFunction1","_this4","tableNames","removeFunction","createRows","React","Component","List","handleChange","handleSubmit","preventDefault","filteredList","currList","title","onSubmit","item","App","buttonClicked","assignments","students","grades","handleButtonClicked","addAssignment","addStudent","addGrade","removeAssignment","removeStudent","buttonName","assignmentName","concat","studentName","assignment","student","score","newList","_","listIndex","newList1","tabChoice","src_List","src_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44ba9c43.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Table extends React.Component {\r\n  getValue(data, tableName, row) {\r\n    if (tableName in data && row in data[tableName]) {\r\n      return data[tableName][row];\r\n    } else {\r\n      return \"Add Score\";\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      //search\r\n      search: \"\",\r\n    };\r\n\r\n    this.updateSearch = this.updateSearch.bind(this);\r\n  }\r\n\r\n  // update search\r\n  updateSearch(event) {\r\n    this.setState({ search: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    // search\r\n    const filteredList =\r\n      this.state.search !== \"\"\r\n        ? this.props.rows.filter(\r\n            (listItem) =>\r\n              listItem.toLowerCase().indexOf(this.state.search) !== -1\r\n          )\r\n        : this.props.rows;\r\n  }\r\n\r\n  createRows(name) {\r\n    return (\r\n      <div>\r\n        {this.props.rows.map((row, index) => (\r\n          <div className=\"Box-row d-flex flex-justify-between\" key={index}>\r\n            {row}\r\n            <input\r\n              className=\"form-control input-sm\"\r\n              type=\"text\"\r\n              placeholder={this.getValue(this.props.data, name, row)}\r\n              onChange={(event) =>\r\n                this.props.addFunction(name, row, event.target.value)\r\n              }\r\n            />\r\n\r\n            {/* remove students from grades */}\r\n            <input\r\n              className=\"btn btn-sm \"\r\n              type=\"button\"\r\n              value=\"remove\"\r\n              onClick={() => this.props.removeFunction1(index)}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  // eslint-disable-next-line no-dupe-class-members\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* search */}\r\n        <label>\r\n          <input\r\n            placeholder=\"Search\"\r\n            className=\"form-control input-sm mx-auto d-block mt-6\"\r\n            type=\"text\"\r\n            value={this.state.search}\r\n            onChange={this.updateSearch}\r\n          />\r\n        </label>\r\n\r\n        {this.props.tableNames.map((name, index) => (\r\n          <div className=\"pt-6\" key={index}>\r\n            <div className=\"Box col-6 mx-auto\">\r\n              <div className=\"Box-header Box-title\">\r\n                {name}\r\n\r\n                {/* remove assignments from grades */}\r\n                <input\r\n                  className=\"btn btn-sm float-right\"\r\n                  type=\"button\"\r\n                  value=\"remove\"\r\n                  onClick={() => this.props.removeFunction(index)}\r\n                />\r\n              </div>\r\n\r\n              <div>{this.createRows(name)}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\n\r\nclass List extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      //search\r\n      search: \"\",\r\n    };\r\n\r\n    this.updateSearch = this.updateSearch.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    this.setState({\r\n      value: \"\",\r\n    });\r\n\r\n    this.props.addFunction(this.state.value);\r\n    event.preventDefault();\r\n  }\r\n\r\n  // update search\r\n  updateSearch(event) {\r\n    this.setState({ search: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    // search\r\n    const filteredList =\r\n      this.state.search !== \"\"\r\n        ? this.props.currList.filter(\r\n            (listItem) =>\r\n              listItem.toLowerCase().indexOf(this.state.search) !== -1\r\n          )\r\n        : this.props.currList;\r\n\r\n    return (\r\n      <div className=\"col-6 mx-auto\">\r\n        {/*Replace the code below to call the title prop*/}\r\n        <p className=\"h2\">{this.props.title}</p>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            <input\r\n              className=\"form-control input-sm\"\r\n              type=\"text\"\r\n              placeholder={this.props.placeholder}\r\n              value={this.state.value}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n\r\n          <input className=\"btn btn-sm\" type=\"submit\" value=\"Submit\" />\r\n\r\n          {/* search */}\r\n          <label>\r\n            <input\r\n              placeholder=\"Search\"\r\n              className=\"form-control input-sm\"\r\n              type=\"text\"\r\n              value={this.state.search}\r\n              onChange={this.updateSearch}\r\n            />\r\n          </label>\r\n        </form>\r\n\r\n        <ul className=\"Box\">\r\n          <div className=\"Box-header\">{this.props.title}</div>\r\n          {filteredList.map((item, index) => (\r\n            <li className=\"Box-row\" key={index}>\r\n              {\" \"}\r\n              {item}\r\n              {/* remove button */}\r\n              <input\r\n                className=\"btn btn-sm float-right\"\r\n                type=\"button\"\r\n                value=\"remove\"\r\n                onClick={() => this.props.removeFunction(index)}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport Table from \"./Table\";\r\nimport List from \"./List\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      buttonClicked: \"\",\r\n      assignments: [] /*Below this line, add the students state variable*/,\r\n      students: [],\r\n      grades: {},\r\n    };\r\n\r\n    this.handleButtonClicked = this.handleButtonClicked.bind(this);\r\n    this.addAssignment = this.addAssignment.bind(this);\r\n    /*Uncomment the line below to bind the method*/\r\n    this.addStudent = this.addStudent.bind(this);\r\n    this.addGrade = this.addGrade.bind(this);\r\n    this.removeAssignment = this.removeAssignment.bind(this);\r\n    this.removeStudent = this.removeStudent.bind(this);\r\n    // this.deleteRow = this.deleteRow.bind(this);\r\n  }\r\n\r\n  handleButtonClicked(buttonName) {\r\n    this.setState({\r\n      buttonClicked: buttonName,\r\n    });\r\n  }\r\n\r\n  /*Check out this addAssignment method*/\r\n  addAssignment(assignmentName) {\r\n    this.setState({\r\n      assignments: this.state.assignments.concat(assignmentName),\r\n    });\r\n  }\r\n\r\n  /*Write an addStudent method here*/\r\n  addStudent(studentName) {\r\n    this.setState({\r\n      students: this.state.students.concat(studentName),\r\n    });\r\n  }\r\n\r\n  addGrade(assignment, student, score) {\r\n    let grades = this.state.grades;\r\n    let assignmentName = assignment;\r\n    let studentName = student;\r\n    if (!(assignment in grades)) {\r\n      grades[assignmentName] = {};\r\n    }\r\n    grades[assignmentName][studentName] = score;\r\n    this.setState({ grades: grades });\r\n  }\r\n\r\n  removeAssignment(index) {\r\n    const newList = this.state.assignments.filter(\r\n      (_, listIndex) => index !== listIndex\r\n    );\r\n    this.setState({ assignments: newList });\r\n  }\r\n\r\n  removeStudent(index) {\r\n    const newList1 = this.state.students.filter(\r\n      (_, listIndex) => index !== listIndex\r\n    );\r\n    this.setState({ students: newList1 });\r\n  }\r\n\r\n  // test for deleting only one row(name) in grades\r\n  // deleteRow(index) {\r\n  //   const newList2 = [...this.state.students];\r\n  //   newList2.splice(index, 1);\r\n  //   this.setState({ students: newList2 });\r\n  // }\r\n\r\n  render() {\r\n    let tabChoice = <div />;\r\n\r\n    /*Uncomment below to render assignments*/\r\n    if (this.state.buttonClicked === \"assignments\") {\r\n      tabChoice = (\r\n        <List\r\n          placeholder=\"Add Assignment...\"\r\n          currList={this.state.assignments}\r\n          addFunction={this.addAssignment}\r\n          removeFunction={this.removeAssignment}\r\n          title=\"Assignments\"\r\n        />\r\n      );\r\n    }\r\n\r\n    /* Change below to render students*/\r\n\r\n    if (this.state.buttonClicked === \"students\") {\r\n      tabChoice = (\r\n        <List\r\n          placeholder=\"Add Student...\"\r\n          currList={this.state.students}\r\n          addFunction={this.addStudent}\r\n          removeFunction={this.removeStudent}\r\n          title=\"Student Roster\"\r\n        />\r\n      );\r\n    }\r\n\r\n    /* Uncomment lines below to render grades*/\r\n    if (this.state.buttonClicked === \"grades\") {\r\n      tabChoice = (\r\n        <Table\r\n          tableNames={this.state.assignments}\r\n          rows={this.state.students}\r\n          addFunction={this.addGrade}\r\n          removeFunction={this.removeAssignment}\r\n          removeFunction1={this.removeStudent}\r\n          data={this.state.grades}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"Box Box--spacious f4\">\r\n          <div className=\"Box-header\">\r\n            <h3 className=\"Box-title d-flex flex-justify-center\">GradeBook</h3>\r\n          </div>\r\n        </div>\r\n        <nav className=\"UnderlineNav d-flex flex-justify-center\">\r\n          <div className=\"UnderlineNav-body pt-6\">\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.handleButtonClicked(\"assignments\")}\r\n            >\r\n              Assignments\r\n            </button>\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.handleButtonClicked(\"students\")}\r\n            >\r\n              Students\r\n            </button>\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.handleButtonClicked(\"grades\")}\r\n            >\r\n              Grades\r\n            </button>\r\n          </div>\r\n        </nav>\r\n        {tabChoice}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}